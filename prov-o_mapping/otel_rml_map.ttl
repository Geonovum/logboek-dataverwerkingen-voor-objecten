@prefix rr: <http://www.w3.org/ns/r2rml#>.
@prefix rml: <http://semweb.mmlab.be/ns/rml#>.
@prefix ql: <http://semweb.mmlab.be/ns/ql#>.
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix schema: <http://schema.org/>.
@prefix prov: <http://www.w3.org/ns/prov#> .
@base <http://example.com/ns#>.

#Trace object
<#TraceMapping> a rr:TriplesMap;
  rml:logicalSource [
    rml:source "./trace.json";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$.resourceSpans[*].scopeSpans[*].spans[0]"
  ];

  rr:subjectMap [
    rr:template "http://trace.example.com/trace/{traceId}";
    rr:class prov:Activity
  ];

  rr:predicateObjectMap [
    rr:predicate rdfs:label;
    rr:objectMap [
      rml:reference "traceId"
    ]
  ];

  rr:predicateObjectMap [
    rr:predicate rdfs:comment;
    rr:objectMap [
      # rr:constant "Trace"
      rml:reference "name"
    ]
  ];
  .

#span object (indivduele acties binnen een trace)
# wasgeneratedby -> trace
<#SpanMapping> a rr:TriplesMap;
  rml:logicalSource [
    rml:source "./trace.json";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$.resourceSpans[*].scopeSpans[*].spans[*]"
  ];

  rr:subjectMap [
    rr:template "http://trace.example.com/span/{spanId}";
    rr:class prov:Activity
  ];

   rr:predicateObjectMap [
    rr:predicate prov:startedAtTime;
    rr:objectMap [
      rml:reference "startTimeUnixNano";
      rml:datatype xsd:dateTime
    ]
  ];

  rr:predicateObjectMap [
    rr:predicate prov:endedAtTime;
    rr:objectMap [
      rml:reference "endTimeUnixNano";
      rml:datatype xsd:dateTime
    ]
  ];

  rr:predicateObjectMap [
    rr:predicate schema:name;
    rr:objectMap [
      rml:reference "name";
      rml:datatype xsd:string
    ]
  ];

  rr:predicateObjectMap [
    rr:predicate prov:wasGeneratedBy;
    rr:objectMap [
       rr:parentTriplesMap <#TraceMapping>;
       rr:joinCondition [
           rr:child "traceId";
           rr:parent "traceId"
        ]
    ]
  ];

  # rr:predicateObjectMap [
  #   rr:predicate prov:qualifiedAssociation;
  #   rr:objectMap [
  #      rr:parentTriplesMap <#EntityAssociationMapping>;
  #      rr:joinCondition [
  #          rr:child "attributes[0].value.stringValue";
  #          rr:parent "value.stringValue"
  #       ]
  #   ]
  # ];

  # rr:predicateObjectMap [
  #   rr:predicate prov:qualifiedAssociation;
  #   rr:objectMap [
  #      rr:parentTriplesMap <#DefinitionAssociationMapping>;
  #      rr:joinCondition [
  #          rr:child "attributes[0].value.stringValue";
  #          rr:parent "value.stringValue"
  #       ]
  #   ]
  # ];
  
  .

#algoritme object (wordt nog niet aangemaakt?)
<#EntityMapping> a rr:TriplesMap;
    rml:logicalSource [
    rml:source "./trace.json";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$.resourceSpans[*].resource[*].attributes[?(@.key=='service.name')]"
    # rml:iterator "$.resourceSpans[*].resource[0].attributes[0]"
  ];

    rr:subjectMap [
    rr:template "http://trace.example.com/entity/{value.stringValue}";
    rr:class prov:Entity
  ];

    rr:predicateObjectMap [
    rr:predicate rdfs:label;
    rr:objectMap [
      rml:reference "value.stringValue"
    ]
  ];

    rr:predicateObjectMap [
    rr:predicate rdfs:comment;
    rr:objectMap [
      rr:constant "algoritme"
    ]
  ];
.

#definitie object
<#DefinitionMapping> a rr:TriplesMap;
    rml:logicalSource [
    rml:source "./trace.json";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$.resourceSpans[*].scopeSpans[*].spans[*].attributes[?(@.key=='dpl.objects.data_object_def')]"
  ];

  rr:subjectMap [
    rr:template "http://trace.example.com/entity/{value.stringValue}";
    rr:class prov:Entity
  ];

  rr:predicateObjectMap [
    rr:predicate rdfs:label;
    rr:objectMap [
      rml:reference "value.stringValue"
    ]
  ];

    rr:predicateObjectMap [
    rr:predicate rdfs:comment;
    rr:objectMap [
      rr:constant "definitie"
    ]
  ];
.

# # relatie tussen algoritme en span
# #logica mist nog..
# <#ProcessingAssociationMapping> a rr:TriplesMap;
#     rml:logicalSource [
#     rml:source "./trace.json";
#     rml:referenceFormulation ql:JSONPath;
#     # rml:iterator "$.spans[*]"
#     rml:iterator "$.resourceSpans[*].scopeSpans[*].spans[*].attributes[?(@.key=='dpl.objects.processing_association_id')]"
#   ];

#   rr:subjectMap [
#     rr:template "http://trace.example.com/association/{value.stringValue}";
#     rr:class prov:Association
#   ];

#   rr:predicateObjectMap [
#     rr:predicate rdfs:comment;
#     rr:objectMap [
#       rr:constant "de associatierelatie naar het algoritme"
#     ]
#   ];

#   rr:predicateObjectMap [
#     rr:predicate rdfs:label;
#     rr:objectMap [
#       rml:reference "value.stringValue"
#     ]
#   ];

#    rr:predicateObjectMap [
#     rr:predicate prov:hadPlan;
#     rr:objectMap [
#       rr:parentTriplesMap <#EntityMapping>;
#        rr:joinCondition [
#            rr:child "value.stringValue";
#            rr:parent "value.stringValue"
#         ]
#     ]
#   ];
# .

# #relatie tussen definitie en span
# <#DefinitionAssociationMapping> a rr:TriplesMap;
#     rml:logicalSource [
#     rml:source "./trace.json";
#     rml:referenceFormulation ql:JSONPath;
#     # rml:iterator "$.spans[*]"
#     rml:iterator "$.resourceSpans[*].scopeSpans[*].spans[*].attributes[?(@.key=='dpl.objects.data_object_def')]"
#   ];

#   rr:subjectMap [
#     rr:template "http://trace.example.com/association/{value.stringValue}";
#     rr:class prov:Association
#   ];

#   rr:predicateObjectMap [
#     rr:predicate rdfs:comment;
#     rr:objectMap [
#       rr:constant "de associatierelatie naar de definitie"
#     ]
#   ];

#   rr:predicateObjectMap [
#     rr:predicate rdfs:label;
#     rr:objectMap [
#       rml:reference "value.stringValue"
#     ]
#   ];

#    rr:predicateObjectMap [
#     rr:predicate prov:hadPlan;
#     rr:objectMap [
#       rr:parentTriplesMap <#DefinitionMapping>;
#        rr:joinCondition [
#            rr:child "value.stringValue";
#            rr:parent "value.stringValue"
#         ]
#     ]
#   ];
# .


